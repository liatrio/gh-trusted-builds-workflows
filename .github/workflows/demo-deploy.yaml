name: Demo Deploy

on:
  workflow_call:
    inputs:
      digest:
        type: string
        required: true
        description: "Docker image digest"
      environment:
        description: "Name of the Sigstore environment to use. Should be one of [staging, production]"
        default: "production"
        type: string

env:
  DEMO_IMAGE_POLICY: |
    apiVersion: policy.sigstore.dev/v1alpha1
    kind: ClusterImagePolicy
    metadata:
      name: demo
    spec:
      images:
        - glob: "ghcr.io/${IMAGE_REPO}**"
      authorities:
        - name: build-and-push
          keyless:
            url: ${FULCIO_URL}
            trustRootRef: ${TRUST_ROOT_NAME}
            identities:
              - issuer: https://token.actions.githubusercontent.com
                subjectRegExp: ^https://github\.com/liatrio/gh-trusted-builds-workflows/\.github/workflows/build-and-push\.yaml@refs/tags/v\d\.\d\.\d$
          ctlog:
            url: ${REKOR_URL}
            trustRootRef: ${TRUST_ROOT_NAME}
        - name: vsa
          keyless:
            url: ${FULCIO_URL}
            trustRootRef: ${TRUST_ROOT_NAME}
            identities:
              - issuer: https://token.actions.githubusercontent.com
                subjectRegExp: ^https://github\.com/liatrio/gh-trusted-builds-workflows/\.github/workflows/policy-verification\.yaml@refs/tags/v\d\.\d\.\d$
          ctlog:
            url: ${REKOR_URL}
            trustRootRef: ${TRUST_ROOT_NAME}
          attestations:
              - name: has-passing-vsa
                predicateType: "https://slsa.dev/verification_summary/v0.2"
                policy:
                  type: rego
                  data: |
                    package sigstore
                    default isCompliant = false
                    isCompliant {
                      startswith(input.predicate.verifier.id, "https://github.com/liatrio/gh-trusted-builds-workflows/.github/workflows/policy-verification.yaml")
                      input.predicate.verification_result == "PASSED"
                    }
      policy:
        type: rego
        data: |
          package sigstore
          default isCompliant = false
          # require the image to be signed by the build-and-push workflow and to have a passing VSA
          isCompliant {
            count(input.authorityMatches["build-and-push"].signatures) >= 1
            count(input.authorityMatches["vsa"].attestations) >= 1
          }

  TRUST_ROOT: |
    apiVersion: policy.sigstore.dev/v1alpha1
    kind: TrustRoot
    metadata:
      name: custom-root
    spec:
      remote:
        mirror: ${TUF_MIRROR}
        root: ${TUF_ROOT}
jobs:
  detect-workflow:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # needed to grab job_workflow_ref information
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
      workflow: ${{ steps.detect.outputs.workflow }}
    steps:
      - name: Detect the repository and ref
        id: detect
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow-js@e55b76ce421082dfa4b34a6ac3c5e59de0f3bb58 # v1.7.0

  deploy:
    permissions:
      packages: read # needed to pull images from GHCR
      contents: read # for reading local TUF root.json file
    runs-on: ubuntu-latest
    needs:
      - detect-workflow
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          path: app

      - name: Checkout Workflows Repo
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744 # v3
        with:
          repository: ${{ needs.detect-workflow.outputs.repository }}
          ref: ${{ needs.detect-workflow.outputs.ref }}
          path: gh-trusted-builds-workflows
          persist-credentials: false

      - name: Configuration
        id: config
        uses: ./gh-trusted-builds-workflows/.github/actions/config
        with:
          environment: ${{ inputs.environment }}

      - name: Install Helm
        uses: azure/setup-helm@5119fcb9089d432beecbf79bb2c7915207344b78 # v3
        with:
         version: ${{ steps.config.outputs.helmVersion }}

      - name: Install k3s
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download --repo k3d-io/k3d \
            --pattern k3d-linux-amd64 \
            ${{ steps.config.outputs.k3dVersion }}
          chmod +x k3d-linux-amd64
          mkdir -p $HOME/.bin/k3d
          mv k3d-linux-amd64 $HOME/.bin/k3d/k3d
          echo "$HOME/.bin/k3d" >> $GITHUB_PATH

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Cluster
        run: |
          k3d cluster create --agents 1 --no-lb --wait demo

      - name: Add Sigstore Helm Repo
        run: |
          helm version
          helm repo add sigstore https://sigstore.github.io/helm-charts
          helm repo update

      - name: Deploy Policy Controller
        run: |
          helm install \
            --wait \
            --create-namespace \
            -n policy-controller \
            --version ${{ steps.config.outputs.policyControllerVersion }} \
            policy-controller sigstore/policy-controller

      - name: App Setup
        run: |
          kubectl create ns demo
          kubectl label ns demo policy.sigstore.dev/include=true

          kubectl -n demo create secret docker-registry ghcr \
            --docker-server=ghcr.io \
            --docker-username=github --docker-password=${{ secrets.GITHUB_TOKEN }}

          kubectl -n demo patch serviceaccount default -p '{"imagePullSecrets": [{"name": "ghcr"}]}'

      - name: Create Policy
        env:
          IMAGE_REPO: ${{ github.repository }}
          FULCIO_URL: ${{ steps.config.outputs.fulcioUrl }}
          REKOR_URL: ${{ steps.config.outputs.rekorUrl }}
        run: |
          tufRoot="${{ steps.config.outputs.tufRoot }}"
          tufMirror="${{ steps.config.outputs.tufMirror }}"

          if [[ "${tufRoot}" && "${tufMirror}" ]]; then
            echo "Using custom TUF root"
            ls -la
            export TUF_MIRROR="${tufMirror}"
            export TUF_ROOT=$(base64 -w 0 < "../gh-trusted-builds-workflows/${tufRoot}")
            export TRUST_ROOT_NAME="custom-root"

            echo "Creating trust root:"
            echo "${TRUST_ROOT}" | envsubst | tee /dev/fd/2 | kubectl apply -f -

            echo "Waiting for controller to reconcile"
            sleep 10
          else
            echo "Using production public good Sigstore root"
          fi

          echo "Creating policy:"
          echo "${DEMO_IMAGE_POLICY}" | envsubst | tee /dev/fd/2 | kubectl apply -f -

      - name: Deploy App
        run: |
          kubectl -n demo create deploy \
            --image=ghcr.io/${{ github.repository }}@${{ inputs.digest }} demo
          kubectl -n demo rollout status deploy demo

      - name: Show Deployment
        run: |
          kubectl -n demo get all
