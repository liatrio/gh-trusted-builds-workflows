name: Demo Deploy

on:
  workflow_call:
    inputs:
      digest:
        type: string
        required: true
        description: "Docker image digest"
      helmVersion:
        type: string
        description: "Helm version"
        default: "v3.10.3"
      k3dVersion:
        type: string
        description: "k3s version"
        default: "v5.4.9"
      policyControllerVersion:
        type: string
        description: "Policy controller Helm chart version"
        default: "0.5.7"
      fulcioUrl:
        description: "Sigstore Fulcio URL. Defaults to the production public good instance"
        default: "https://fulcio.sigstore.dev"
        type: string
      rekorUrl:
        description: "Sigstore Rekor URL. Defaults to the production public good instance"
        default: "https://rekor.sigstore.dev"
        type: string
      tufMirror:
        description: "cosign TUF root mirror URL. If not specified, cosign initialize will not be invoked"
        default: ""
        type: string
      tufRoot:
        description: "cosign TUF initial trusted root. If not specified, cosign initialize will not be invoked"
        default: ""
        type: string

env:
  DEFAULT_IMAGE_POLICY: |
    apiVersion: policy.sigstore.dev/v1alpha1
    kind: ClusterImagePolicy
    metadata:
      name: demo
    spec:
      images:
        - glob: "ghcr.io/${IMAGE_REPO}**"
      authorities:
        - name: attestation
          keyless:
            url: ${FULCIO_URL}
            identities:
              - issuerRegExp: https://token.actions.githubusercontent.com
                subjectRegExp: https://github.com/liatrio/gh-trusted-builds-workflows/.github/workflows/policy-verification.yaml@refs/heads/main
          ctlog:
            url: ${REKOR_URL}
          attestations:
              - name: passed-vsa
                predicateType: "https://slsa.dev/verification_summary/v0.2"
                policy:
                  type: rego
                  data: |
                    package sigstore
                    default isCompliant = false
                    isCompliant {
                      input.predicate.verification_result == "PASSED"
                    }

jobs:
  deploy:
    permissions:
      packages: read
    runs-on: ubuntu-latest
    steps:

      - name: Create Policy
        env:
          IMAGE_REPO: ${{ github.repository }}
          FULCIO_URL: ${{ inputs.fulcioUrl }}
          REKOR_URL: ${{ inputs.rekorUrl }}
        run: |
          echo ${DEFAULT_IMAGE_POLICY} | envsubst > policy.yaml
          cat policy.yaml
#      - name: Install Helm
#        uses: azure/setup-helm@v3
#        with:
#         version: ${{ inputs.helmVersion }}
#
#      - name: Install k3s
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          envsubst --version
#
#          gh release download --repo k3d-io/k3d \
#            --pattern k3d-linux-amd64 \
#            ${{ inputs.k3dVersion }}
#          chmod +x k3d-linux-amd64
#          mkdir -p $HOME/.bin/k3d
#          mv k3d-linux-amd64 $HOME/.bin/k3d/k3d
#          echo "$HOME/.bin/k3d" >> $GITHUB_PATH
#
#      - name: Login to GitHub Container Registry
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.actor }}
#          password: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Create Cluster
#        run: |
#          k3d cluster create --agents 1 --no-lb --wait demo
#
#      - name: Import Image
#        run: |
#          docker pull ghcr.io/${{ github.repository }}@${{ inputs.digest }}
#          docker save -o image.tar ghcr.io/${{ github.repository }}@${{ inputs.digest }}
#          k3d image import --cluster demo image.tar
#          rm image.tar
#
#      - name: Add Sigstore Helm Repo
#        run: |
#          helm version
#          helm repo add sigstore https://sigstore.github.io/helm-charts
#          helm repo update
#
#      - name: Deploy Policy Controller
#        run: |
#          helm install \
#            --wait \
#            --create-namespace \
#            -n policy-controller \
#            --version ${{ inputs.policyControllerVersion }} \
#            policy-controller sigstore/policy-controller


#      - name: Deploy App
#        run: |
#          kubectl create ns demo
#          kubectl label ns demo policy.sigstore.dev/include=true
#          kubectl -n demo create deploy \
#            --image=ghcr.io/${{ github.repository }}@${{ inputs.digest }} demo
#
#      - name: Debug
#        run: |
#          kubectl get ns
#          kubectl -n policy-controller get all
#          kubectl -n demo get all
