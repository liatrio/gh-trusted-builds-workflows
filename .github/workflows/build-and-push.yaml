name: Build & Push

on:
  workflow_call:
    inputs:
      environment:
        description: "Name of the Sigstore environment to use. Should be one of [staging, production]"
        default: "production"
        type: string
    outputs:
      digest:
        description: "Docker image digest"
        value: ${{ jobs.push.outputs.digest }}

jobs:
  detect-workflow:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # needed to grab job_workflow_ref information
    outputs:
      repository: ${{ steps.detect.outputs.repository }}
      ref: ${{ steps.detect.outputs.ref }}
      workflow: ${{ steps.detect.outputs.workflow }}
    steps:
      - name: Detect the repository and ref
        id: detect
        uses: slsa-framework/slsa-github-generator/.github/actions/detect-workflow-js@e55b76ce421082dfa4b34a6ac3c5e59de0f3bb58 # v1.7.0

  build:
    permissions:
      contents: read # required to build the container image
    runs-on: ubuntu-latest
    outputs:
      metadata: ${{ steps.meta.outputs.json }}
    steps:
      - name: Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@ecf95283f03858871ff00b787d79c419715afc34 # v2

      - name: Image Metadata
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=
            latest

      - name: Build Image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4
        with:
          context: .
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=docker,dest=/tmp/image.tar

      - name: Upload Image Archive
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3
        with:
          name: image
          path: /tmp/image.tar

  push:
    permissions:
      packages: write # required to push the image to GHCR
    runs-on: ubuntu-latest
    needs:
      - build
      - detect-workflow
    outputs:
      digest: ${{ steps.digest.outputs.digest }}
    steps:
      - name: Checkout Workflows Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          repository: ${{ needs.detect-workflow.outputs.repository }}
          ref: ${{ needs.detect-workflow.outputs.ref }}
          path: gh-trusted-builds-workflows
          persist-credentials: false

      - name: Configuration
        id: config
        uses: ./gh-trusted-builds-workflows/.github/actions/config
        with:
          environment: ${{ inputs.environment }}

      - name: Download Image Archive
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3
        with:
          name: image
          path: /tmp

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Crane
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd $(mktemp -d)

          gh release download \
          --repo google/go-containerregistry \
          --pattern "go-containerregistry_Linux_x86_64.tar.gz" "${{ steps.config.outputs.craneVersion }}"

          tar xvf go-containerregistry_Linux_x86_64.tar.gz

          mkdir -p $HOME/.bin/crane
          mv ./crane $HOME/.bin/crane
          echo "$HOME/.bin/crane" >> $GITHUB_PATH
          $HOME/.bin/crane/crane version

      - name: Compute Digest
        id: digest
        run: |
          localDigest=$(crane digest --tarball /tmp/image.tar)
          echo "locally-computed digest: ${localDigest}"
          echo "digest=${localDigest}" >> $GITHUB_OUTPUT

      - name: Push Image
        id: push
        env:
          IMAGE_METADATA: ${{ needs.build.outputs.metadata }}
        run: |
          commit="${{ github.sha }}"
          pushedImage=$(printf "${IMAGE_METADATA}" | jq --arg commit "${commit::7}" -r '.tags | .[] | select(.|endswith($commit))')
          echo "Pushing ${pushedImage}"
          crane push /tmp/image.tar "${pushedImage}"
          echo "image=${pushedImage}" >> $GITHUB_OUTPUT

      - name: Compare Digests
        run: |
          pushedImage=${{ steps.push.outputs.image }}
          registryDigest=$(crane digest "${pushedImage}")
          localDigest=${{ steps.digest.outputs.digest }}

          if [[ "${localDigest}" == "${registryDigest}" ]]; then
              echo "Remote digest matches digest from local registry"
          else
              echo "Digest in registry doesn't match expected digest"
              echo "Locally-computed digest: ${localDigest}"
              echo "Digest from registry: ${registryDigest}"
              echo "This may indicate the image was modified by the registry"
              exit 1
          fi

      - name: Add Tags
        env:
          IMAGE_METADATA: ${{ needs.build.outputs.metadata }}
        run: |
          pushedImage=${{ steps.push.outputs.image }}

          # add the remaining tags, skipping the tag that was pushed initially
          printf "${IMAGE_METADATA}" | jq -rc '.tags | .[]' | while read taggedImage; do
            if [[ "${taggedImage}" == "${pushedImage}" ]]; then
              continue
            fi

            tag=$(printf "${taggedImage}" | awk -F "${image}:" '{print $2}')
            echo "adding tag ${tag}"
            crane tag "${pushedImage}" "${tag}"
          done

  sign:
    permissions:
      id-token: write # required to sign image
      contents: read # for reading local TUF root.json file
      packages: write # required to upload signature to GHCR
    runs-on: ubuntu-latest
    needs:
      - push
      - detect-workflow
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout App Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          path: app

      - name: Checkout Workflows Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          repository: ${{ needs.detect-workflow.outputs.repository }}
          ref: ${{ needs.detect-workflow.outputs.ref }}
          path: gh-trusted-builds-workflows
          persist-credentials: false

      - name: Configuration
        id: config
        uses: ./gh-trusted-builds-workflows/.github/actions/config
        with:
          environment: ${{ inputs.environment }}

      - name: Cosign Setup
        uses: ./gh-trusted-builds-workflows/.github/actions/cosign
        with:
          tufRoot: ${{ steps.config.outputs.tufRoot }}
          tufMirror: ${{ steps.config.outputs.tufMirror }}
          version: ${{ steps.config.outputs.cosignVersion }}
          workingDirectory: ./gh-trusted-builds-workflows

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign
        run: |
          cosign sign \
              --annotations liatr.io/github-actions-run-link='${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}' \
              --annotations liatr.io/signed-off-by=platform-team \
              --rekor-url ${{ steps.config.outputs.rekorUrl }} \
              --fulcio-url ${{ steps.config.outputs.fulcioUrl }} \
              --yes ghcr.io/${{ github.repository }}@${{ needs.push.outputs.digest }}


  provenance:
    permissions:
      actions: read # for populating provenance: https://github.com/slsa-framework/slsa-github-generator/blob/934435652996c02a6317092984312602dfaf2a21/.github/workflows/generator_container_slsa3.yml#L122
      id-token: write # required to sign attestations
      contents: read # for reading local TUF root.json file
      packages: write # required to upload attestations to GHCR
    runs-on: ubuntu-latest
    needs:
      - push
      - detect-workflow
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout App Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          path: app

      - name: Checkout Workflows Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          repository: ${{ needs.detect-workflow.outputs.repository }}
          ref: ${{ needs.detect-workflow.outputs.ref }}
          path: gh-trusted-builds-workflows
          persist-credentials: false

      - name: Configuration
        id: config
        uses: ./gh-trusted-builds-workflows/.github/actions/config
        with:
          environment: ${{ inputs.environment }}

      - name: Download SLSA Generator
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download \
            --repo slsa-framework/slsa-github-generator \
            --pattern slsa-generator-container-linux-amd64 "v${{ steps.config.outputs.slsaGeneratorVersion }}"

          chmod +x slsa-generator-container-linux-amd64
          ./slsa-generator-container-linux-amd64 --help

          mkdir -p $HOME/.bin/slsa-generator-container
          mv ./slsa-generator-container-linux-amd64 $HOME/.bin/slsa-generator-container/slsa-generator-container
          echo "$HOME/.bin/slsa-generator-container" >> $GITHUB_PATH

      - name: Generate Provenance
        env:
          GITHUB_CONTEXT: "${{ toJSON(github) }}"
        run: |
          slsa-generator-container generate --predicate predicate.json

      - name: Cosign Setup
        uses: ./gh-trusted-builds-workflows/.github/actions/cosign
        with:
          tufRoot: ${{ steps.config.outputs.tufRoot }}
          tufMirror: ${{ steps.config.outputs.tufMirror }}
          version: ${{ steps.config.outputs.cosignVersion }}
          workingDirectory: ./gh-trusted-builds-workflows

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest Provenance
        run: |
          cosign attest --predicate="predicate.json" \
            --rekor-url ${{ steps.config.outputs.rekorUrl }} \
            --type slsaprovenance \
            --fulcio-url ${{ steps.config.outputs.fulcioUrl }} \
            --yes \
            ghcr.io/${{ github.repository }}@${{ needs.push.outputs.digest }}


  sbom:
    permissions:
      id-token: write # used to sign attestations
      contents: read # for reading local TUF root.json file
      packages: write # used to push attestations to GHCR
    runs-on: ubuntu-latest
    needs:
      - push
      - detect-workflow
      - provenance # prevent race conditions when updating attestation tag
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout App Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          path: app

      - name: Checkout Workflows Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          repository: ${{ needs.detect-workflow.outputs.repository }}
          ref: ${{ needs.detect-workflow.outputs.ref }}
          path: gh-trusted-builds-workflows
          persist-credentials: false

      - name: Configuration
        id: config
        uses: ./gh-trusted-builds-workflows/.github/actions/config
        with:
          environment: ${{ inputs.environment }}

      - name: Cosign Setup
        uses: ./gh-trusted-builds-workflows/.github/actions/cosign
        with:
          tufRoot: ${{ steps.config.outputs.tufRoot }}
          tufMirror: ${{ steps.config.outputs.tufMirror }}
          version: ${{ steps.config.outputs.cosignVersion }}
          workingDirectory: ./gh-trusted-builds-workflows

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: anchore/sbom-action/download-syft@78fc58e266e87a38d4194b2137a3d4e9bcaf7ca1 # v0
        with:
          syft-version: ${{ steps.config.outputs.syftVersion }}

      - name: Generate SPDX SBOM
        env:
          SYFT_FILE_METADATA_CATALOGER_ENABLED: true
          SYFT_FILE_METADATA_DIGESTS: sha256
        run: |
          syft -o spdx-json --file sbom.spdx.json ghcr.io/${{ github.repository }}@${{ needs.push.outputs.digest }}

          cosign attest --predicate="sbom.spdx.json" \
            --rekor-url ${{ steps.config.outputs.rekorUrl }} \
            --type spdxjson \
            --fulcio-url ${{ steps.config.outputs.fulcioUrl }} \
            --yes \
            ghcr.io/${{ github.repository }}@${{ needs.push.outputs.digest }}

          rm sbom.spdx.json

  source-attestations:
    permissions:
      id-token: write # used to sign attestations
      contents: read # necessary for Git history
      packages: write # used to push attestations to GHCR
      pull-requests: read # used to populate attestation fields
    runs-on: ubuntu-latest
    needs:
      - push
      - detect-workflow
      - sbom # prevent race conditions when updating attestation tag
    defaults:
      run:
        working-directory: ./app
    steps:
      - name: Checkout App Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          path: app

      - name: Checkout Workflows Repo
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          repository: ${{ needs.detect-workflow.outputs.repository }}
          ref: ${{ needs.detect-workflow.outputs.ref }}
          path: gh-trusted-builds-workflows
          persist-credentials: false

      - name: Configuration
        id: config
        uses: ./gh-trusted-builds-workflows/.github/actions/config
        with:
          environment: ${{ inputs.environment }}

      - name: Cosign Setup
        uses: ./gh-trusted-builds-workflows/.github/actions/cosign
        with:
          tufRoot: ${{ steps.config.outputs.tufRoot }}
          tufMirror: ${{ steps.config.outputs.tufMirror }}
          version: ${{ steps.config.outputs.cosignVersion }}
          workingDirectory: ./gh-trusted-builds-workflows

      - name: Login to GitHub Container Registry
        uses: docker/login-action@465a07811f14bebb1938fbed4728c6a1ff8901fc # v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Attestor Install
        uses: ./gh-trusted-builds-workflows/.github/actions/attestor
        with:
          version: ${{ steps.config.outputs.attestorVersion }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Request Attestation
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          attestation github-pull-request \
            --artifact-uri ghcr.io/${{ github.repository }} \
            --artifact-digest ${{ needs.push.outputs.digest }} \
            --rekor-url ${{ steps.config.outputs.rekorUrl }} \
            --fulcio-url ${{ steps.config.outputs.fulcioUrl }}

  workflow-metadata:
    permissions: {}
    runs-on: ubuntu-latest
    needs:
      - push
    steps:
      - name: Create Results Metadata
        run: |
          jq -n --arg digest ${{ needs.push.outputs.digest }} '{digest: $digest}' > /tmp/workflow-metadata.json

      - name: Upload Workflow Metadata
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3
        with:
          name: workflow-metadata
          path: /tmp/workflow-metadata.json
